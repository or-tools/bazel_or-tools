diff --git a/src/lpi/lpi_glop.cpp b/src/lpi/lpi_glop.cpp
index 2471778a8f..17fd1e8c34 100644
--- a/src/lpi/lpi_glop.cpp
+++ b/src/lpi/lpi_glop.cpp
@@ -51,7 +51,6 @@
 #include "ortools/util/time_limit.h"

 #include "ortools/base/logging.h"
-#include "ortools/base/vlog_is_on.h"

 #include "lpi/lpi.h"
 #include "scip/pub_message.h"
@@ -2942,12 +2941,12 @@ SCIP_RETCODE SCIPlpiSetIntpar(
       SCIPdebugMessage("SCIPlpiSetIntpar: SCIP_LPPAR_LPINFO -> %d.\n", ival);
       if ( ival == 0 )
       {
-         (void) google::SetVLOGLevel("*", google::GLOG_INFO);
+           absl::SetFlag(&FLAGS_stderrthreshold, 2);
          lpi->lp_info = false;
       }
       else
       {
-         (void) google::SetVLOGLevel("*", google::GLOG_ERROR);
+           absl::SetFlag(&FLAGS_stderrthreshold, 0);
          lpi->lp_info = true;
       }
       break;
@@ -3190,7 +3189,7 @@ SCIP_RETCODE SCIPlpiReadLP(

    const std::string filespec(fname);
    MPModelProto proto;
-   if ( ! ReadFileToProto(filespec, &proto) )
+   if ( ! ReadFileToProto(filespec, &proto).ok() )
    {
       SCIPerrorMessage("Could not read <%s>\n", fname);
       return SCIP_READERROR;
@@ -3214,7 +3213,7 @@ SCIP_RETCODE SCIPlpiWriteLP(
    MPModelProto proto;
    LinearProgramToMPModelProto(*lpi->linear_program, &proto);
    const std::string filespec(fname);
-   if ( ! WriteProtoToFile(filespec, proto, operations_research::ProtoWriteFormat::kProtoText, true) )
+   if ( ! WriteProtoToFile(filespec, proto, operations_research::ProtoWriteFormat::kProtoText, true).ok() )
    {
       SCIPerrorMessage("Could not write <%s>\n", fname);
       return SCIP_READERROR;
diff --git a/src/symmetry/compute_symmetry_bliss.cpp b/src/symmetry/compute_symmetry_bliss.cpp
index 484627c4b9..27c2895165 100644
--- a/src/symmetry/compute_symmetry_bliss.cpp
+++ b/src/symmetry/compute_symmetry_bliss.cpp
@@ -25,5 +25,5 @@
 #include "compute_symmetry.h"

 /* include bliss graph */
-#include <bliss/defs.hh>
-#include <bliss/graph.hh>
+#include <bliss-0.73/defs.hh>
+#include <bliss-0.73/graph.hh>

 #include <string.h>
 #include <vector>

diff --git a/src/scip/githash.c b/src/scip/githash.c
new file mode 100644
index 0000000000..2891bc72de
--- /dev/null
+++ b/src/scip/githash.c
@@ -0,0 +1,1 @@
+#define SCIP_GITHASH "a740f0891e"
diff --git a/src/scip/scipbuildflags.c b/src/scip/scipbuildflags.c
index b54b9112cb..dc8e62b5e0 100644
--- a/src/scip/scipbuildflags.c
+++ b/src/scip/scipbuildflags.c
@@ -21,10 +21,9 @@

 /*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/

+#define SCIP_BUILDFLAGS " ARCH=x86_64\n COMP=gnu\n DEBUGSOL=false\n EXPRINT=none\n GAMS=false\n SYM=bliss\n GMP=false\n IPOPT=false\n IPOPTOPT=opt\n WORHP=false\n WORHPOPT=opt\n LPS=spx2\n LPSCHECK=false\n LPSOPT=opt\n NOBLKBUFMEM=false\n NOBLKMEM=false\n NOBUFMEM=false\n OPT=opt\n OSTYPE=linux\n PARASCIP=true\n READLINE=false\n SANITIZE=\n SHARED=false\n USRARFLAGS=\n USRCFLAGS=-fPIC\n USRCXXFLAGS=-fPIC\n USRDFLAGS=\n USRFLAGS=\n USRLDFLAGS=\n USROFLAGS=\n VERSION=7.0.1\n ZIMPL=false\n ZIMPLOPT=opt\n ZLIB=true"
+
 #include "scip/scipbuildflags.h"
-#ifdef NO_CONFIG_HEADER
-#include "buildflags.c"
-#endif

 /** returns the flags that were used to build SCIP */
 const char* SCIPgetBuildFlags(
